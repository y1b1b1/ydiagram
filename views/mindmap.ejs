<!DOCTYPE html>
<html   style="height:100%;">
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<title>Mind Map</title>
<meta name="description" content="A mind map editor, showing how subtrees can be moved, copied, deleted, and laid out." />
<!-- Copyright 1998-2018 by Northwoods Software Corporation. -->
<meta charset="UTF-8">
<script src="./release/go.js"></script>
<script src="./assets/js/goSamples.js"></script>  <!-- this is only for the GoJS Samples framework -->
<script id="code">
  function init() {
    //if (window.goSamples) goSamples();  // init for these samples -- you don't need to call this
    //var $j = jQuery.noConflict(); 
    var $G = go.GraphObject.make;
    

    myDiagram =
      $G(go.Diagram, "myDiagramDiv",
        {
          // when the user drags a node, also move/copy/delete the whole subtree starting with that node
          "commandHandler.copiesTree": true,
          "commandHandler.deletesTree": true,
          "draggingTool.dragsTree": false,
          initialContentAlignment: go.Spot.Center,  // center the whole graph
          "undoManager.isEnabled": true
        });
    
    $("#clientd").on('DOMNodeInserted',function() {
      var txt = $('#clientd').text().split('$$$');
      var commands = txt[0];

      switch (commands) {
        case 'save':
          save();
          break;
        case 'brush':
          myDiagram.selection.each(function(node) {
            var tb = node.findObject("LineH");
            tb.stroke = txt[1];
          });
          break;
      }
    });
    
    // a node consists of some text with a line shape underneath
    /*
    myDiagram.nodeTemplate =
      $G(go.Node, "Vertical",
        
        $G(go.Panel, "Auto",  // the Shape will go around the TextBlock
          $G(go.Shape, "RoundedRectangle", { strokeWidth: 0},
            // Shape.fill is bound to Node.data.color
            new go.Binding("fill", "brush")),
          $G(go.TextBlock,
            { name: "TEXT",
              minSize: new go.Size(30, 15),
              editable: true,
              font: "bold 15px Helvetica, bold Arial, sans-serif",
              margin: 8 },  // some room around the text
            // TextBlock.text is bound to Node.data.key
            new go.Binding("text", "text").makeTwoWay(),
            new go.Binding("scale", "scale").makeTwoWay(),
            new go.Binding("font", "font").makeTwoWay())
        ),
        $G(go.Shape, "LineH",
          {
            stretch: go.GraphObject.Horizontal,
            strokeWidth: 3, height: 3,
            // this line shape is the port -- what links connect with
            portId: "", fromSpot: go.Spot.LeftRightSides, toSpot: go.Spot.LeftRightSides
          },
          new go.Binding("stroke", "brush"),
          // make sure links come in from the proper direction and go out appropriately
          new go.Binding("fromSpot", "dir", function(d) { return spotConverter(d, true); }),
          new go.Binding("toSpot", "dir", function(d) { return spotConverter(d, false); })),
        $G("TreeExpanderButton", {
            
            
          }),
        // remember the locations of each node in the node data
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        // make sure text "grows" in the desired direction
        new go.Binding("locationSpot", "dir", function(d) { return spotConverter(d, false); })
      );
      */
      myDiagram.nodeTemplate =
      $G(go.Node, "Vertical",
        { selectionObjectName: "TEXT" },
        $G(go.TextBlock,
          {
            name: "TEXT",
            minSize: new go.Size(30, 15),
            font: "bold 15px Helvetica, bold Arial, sans-serif",
            editable: true
          },
          // remember not only the text string but the scale and the font in the node data
          new go.Binding("text", "text").makeTwoWay(),
          new go.Binding("scale", "scale").makeTwoWay(),
          new go.Binding("font", "font").makeTwoWay()),
        $G(go.Shape, "LineH",
          {
            name: "LineH",
            stretch: go.GraphObject.Horizontal,
            strokeWidth: 3, height: 3,
            // this line shape is the port -- what links connect with
            portId: "", fromSpot: go.Spot.LeftRightSides, toSpot: go.Spot.LeftRightSides
          },
          new go.Binding("stroke", "brush").makeTwoWay(),
          // make sure links come in from the proper direction and go out appropriately
          new go.Binding("fromSpot", "dir", function(d) { return spotConverter(d, true); }),
          new go.Binding("toSpot", "dir", function(d) { return spotConverter(d, false); })),
          $G("TreeExpanderButton"),
        // remember the locations of each node in the node data
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        // make sure text "grows" in the desired direction
        new go.Binding("locationSpot", "dir", function(d) { return spotConverter(d, false); })
      );
      

      /*
      myDiagram.nodeTemplate =
      $G(go.Node, "Auto",  // the Shape will go around the TextBlock
        $G(go.Shape, "RoundedRectangle", { strokeWidth: 0},
          // Shape.fill is bound to Node.data.color
          new go.Binding("fill", "brush")),
        $G(go.TextBlock,
          { margin: 8 },  // some room around the text
          // TextBlock.text is bound to Node.data.key
          new go.Binding("text", "text"))
      );
      */

    // selected nodes show a button for adding children
    myDiagram.nodeTemplate.selectionAdornmentTemplate =
      $G(go.Adornment, "Spot",
        $G(go.Panel, "Auto",
          // this Adornment has a rectangular blue Shape around the selected node
          $G(go.Shape, { fill: null, stroke: "dodgerblue", strokeWidth: 3 }),
          $G(go.Placeholder, { margin: new go.Margin(4, 4, 0, 4) })
        ),
        // and this Adornment has a Button to the right of the selected node
        $G("Button",
          {
            alignment: go.Spot.Right,
            alignmentFocus: go.Spot.Left,
            click: addNodeAndLink  // define click behavior for this Button in the Adornment
          },
          $G(go.TextBlock, "+",  // the Button content
            { font: "bold 8pt sans-serif" })
        )
      )  ;

    // the context menu allows users to change the font size and weight,
    // and to perform a limited tree layout starting at that node
    myDiagram.nodeTemplate.contextMenu =
      $G(go.Adornment, "Vertical",
        $G("ContextMenuButton",
          $G(go.TextBlock, "Bigger" ,{font: "bold 17px Helvetica, bold Arial, sans-serif"}),
          { click: function(e, obj) { changeTextSize(obj, 1.1); } }),
        $G("ContextMenuButton",
          $G(go.TextBlock, "Smaller" ,{font: "bold 17px Helvetica, bold Arial, sans-serif"}),
          { click: function(e, obj) { changeTextSize(obj, 1/1.1); } }),
        $G("ContextMenuButton",
          $G(go.TextBlock, "Bold/Normal" ,{font: "bold 17px Helvetica, bold Arial, sans-serif"}),
          { click: function(e, obj) { toggleTextWeight(obj); } }),
        $G("ContextMenuButton",
          $G(go.TextBlock, "Layout" ,{font: "bold 17px Helvetica, bold Arial, sans-serif"}),
          { 
            click: function(e, obj) {
                var adorn = obj.part;
                adorn.diagram.startTransaction("Subtree Layout");
                layoutTree(adorn.adornedPart);
                adorn.diagram.commitTransaction("Subtree Layout");
              }
          }
        )
      );

    
    // a link is just a Bezier-curved line of the same color as the node to which it is connected
    myDiagram.linkTemplate =
      $G(go.Link,
        {
          curve: go.Link.Bezier,
          fromShortLength: -2,
          toShortLength: -2,
          selectable: false
        },
        $G(go.Shape,
          { strokeWidth: 3 },
          new go.Binding("stroke", "toNode", function(n) {
            if (n.data.brush) return n.data.brush;
            return "black";
          }).ofObject())
      );
      

    // the Diagram's context menu just displays commands for general functionality
    myDiagram.contextMenu =
      $G(go.Adornment, "Vertical",
        $G("ContextMenuButton",
          $G(go.TextBlock, "Undo" ,{font: "bold 17px Helvetica, bold Arial, sans-serif"}),
          { click: function(e, obj) { alert(e); e.diagram.commandHandler.undo(); } },
          new go.Binding("visible", "", function(o) { return o.diagram && o.diagram.commandHandler.canUndo(); }).ofObject()),
        $G("ContextMenuButton",
          $G(go.TextBlock, "Redo" ,{font: "bold 17px Helvetica, bold Arial, sans-serif"}) ,
          { click: function(e, obj) { e.diagram.commandHandler.redo(); } },
          new go.Binding("visible", "", function(o) { return o.diagram && o.diagram.commandHandler.canRedo(); }).ofObject()),
        $G("ContextMenuButton",
          $G(go.TextBlock, "Save" ,{font: "bold 17px Helvetica, bold Arial, sans-serif"}),
          { click: function(e, obj) { save(); } }),
        $G("ContextMenuButton",
          $G(go.TextBlock, "Layout" ,{font: "bold 17px Helvetica, bold Arial, sans-serif"}),
          { click: function(e, obj) { layoutAll(); } })
      );

    myDiagram.addDiagramListener("SelectionMoved", function(e) {
      var rootX = myDiagram.findNodeForKey(0).location.x;
      myDiagram.selection.each(function(node) {
          if (node.data.parent !== 0) return; // Only consider nodes connected to the root
          var nodeX = node.location.x;
          if (rootX < nodeX && node.data.dir !== "right") {
            updateNodeDirection(node, "right");
          } else if (rootX > nodeX && node.data.dir !== "left") {
            updateNodeDirection(node, "left");
          }
          layoutTree(node);
        });
    });

    // read in the predefined graph using the JSON format data held in the "mySavedModel" textarea
    load();
  }

  function spotConverter(dir, from) {
    if (dir === "left") {
      return (from ? go.Spot.Left : go.Spot.Right);
    } else {
      return (from ? go.Spot.Right : go.Spot.Left);
    }
  }

  function changeTextSize(obj, factor) {
    var adorn = obj.part;
    adorn.diagram.startTransaction("Change Text Size");
    var node = adorn.adornedPart;
    var tb = node.findObject("TEXT");
    tb.scale *= factor;
    adorn.diagram.commitTransaction("Change Text Size");
  }

  function changeColor(obj, color) {
    var adorn = obj.part;
    var colors = [ "lightgreen", "Aqua","Blue","BlueViolet","Brown","Chartreuse","Crimson","DarkGreen","DarkMagenta","DarkRed","DarkViolet","DeepPink","FireBrick","ForestGreen","Fuchsia","Gold","GreenYellow","Green","LawnGreen","Magenta","Lime","Maroon","MediumBlue","MediumSpringGreen","OrangeRed","Purple","Red","Yellow"];
    adorn.diagram.startTransaction("Change Node Color");
    var node = adorn.adornedPart;
    var tb = node.findObject("LineH");
    // assume "bold" is at the start of the font specifier
    //alert(tb.stroke);
    for (var i=0; i<colors.length; i++) {
      if (colors[i] == tb.stroke) {
        var t = (i+1)%colors.length;
        color = colors[t];
      }
    }
    tb.stroke = color;
    adorn.diagram.commitTransaction("Change Node Color");
  }

  function toggleTextWeight(obj) {
    var adorn = obj.part;
    adorn.diagram.startTransaction("Change Text Weight");
    var node = adorn.adornedPart;
    var tb = node.findObject("TEXT");
    // assume "bold" is at the start of the font specifier
    var idx = tb.font.indexOf("bold");
    if (idx < 0) {
      tb.font = "bold " + tb.font;
    } else {
      tb.font = tb.font.substr(idx + 5);
    }
    adorn.diagram.commitTransaction("Change Text Weight");
  }

  function updateNodeDirection(node, dir) {
    myDiagram.model.setDataProperty(node.data, "dir", dir);
    // recursively update the direction of the child nodes
    var chl = node.findTreeChildrenNodes(); // gives us an iterator of the child nodes related to this particular node
    while(chl.next()) {
      updateNodeDirection(chl.value, dir);
    }
  }

  function addNodeAndLink(e, obj) {
    var adorn = obj.part;
    var diagram = adorn.diagram;
    diagram.startTransaction("Add Node");
    var oldnode = adorn.adornedPart;
    var olddata = oldnode.data;
    // copy the brush and direction to the new node data
    var newdata = { text: "idea", brush: olddata.brush, dir: olddata.dir, parent: olddata.key };
    diagram.model.addNodeData(newdata);
    //layoutTree(oldnode);
    layoutAll();
    diagram.commitTransaction("Add Node");
  }

  function layoutTree(node) {
    if (node.data.key === 0) {  // adding to the root?
      layoutAll();  // lay out everything
    } else {  // otherwise lay out only the subtree starting at this parent node
      var parts = node.findTreeParts();
      layoutAngle(parts, node.data.dir === "left" ? 180 : 0);
    }
  }

  function layoutAngle(parts, angle) {
    var layout = go.GraphObject.make(go.TreeLayout,
        { angle: angle,
          arrangement: go.TreeLayout.ArrangementFixedRoots,
          nodeSpacing: 5,
          layerSpacing: 20,
          setsPortSpot: false, // don't set port spots since we're managing them with our spotConverter function
          setsChildPortSpot: false });
    layout.doLayout(parts);
  }

  function layoutAll() {
    var root = myDiagram.findNodeForKey(0);
    if (root === null) return;
    myDiagram.startTransaction("Layout");
    // split the nodes and links into two collections
    var rightward = new go.Set(go.Part);
    var leftward = new go.Set(go.Part);
    root.findLinksConnected().each(function(link) {
        var child = link.toNode;
        if (child.data.dir === "left") {
          leftward.add(root);  // the root node is in both collections
          leftward.add(link);
          leftward.addAll(child.findTreeParts());
        } else {
          rightward.add(root);  // the root node is in both collections
          rightward.add(link);
          rightward.addAll(child.findTreeParts());
        }
      });
    // do one layout and then the other without moving the shared root node
    layoutAngle(rightward, 0);
    layoutAngle(leftward, 180);
    myDiagram.commitTransaction("Layout");
  }

  // Show the diagram's model in JSON format
  function save() {
    // 通过调用保存模型数据
    var ID="<%=ID%>";
    $.post("/SaveDiagramModel",
      {
        id:ID,
        model:myDiagram.model.toJson()
      },
      function(data,status){
        if (data != "0") {
          alert("Save fail!");
        }
        //alert("Data: " + data + "\nStatus: " + status);
      });
  } 
  function load() {
    // 通过调用获取服务器数据
    var ID="<%=ID%>";
    //myDiagram.model = go.Model.fromJson({ "class": "go.TreeModel", "nodeDataArray": [ {"key":0, "text":"Mind Map", "loc":"0 0", brush: "lightgreen"}]});
    // $.get("/test",function(data,status){
    //   alert("Data: " + data + "\nStatus: " + status);
    // });
    $.getJSON("/GetDiagramModel?ID="+ID, function(json){
      //alert("JSON Data: ");
      myDiagram.model = go.Model.fromJson(json);
    });
  }
</script>
</head>
<body onload="init()"  style="height:100%;">
<div id="sample"  style="height:100%;">
  
  <div id="myDiagramDiv" style="border: solid 1px black; width:100%; height:100%;"></div>

</div>
<div id="clientd" class="clientd" style="display:none">none</div>
<div id="parentd" style="display:none">none</div>
</body>
</html>
